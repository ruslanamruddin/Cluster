
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://bjbltjpiydaadpghgmdz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJqYmx0anBpeWRhYWRwZ2hnbWR6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI2Nzk4MTUsImV4cCI6MjA1ODI1NTgxNX0.4Qyq9N2nsgz6x6hkCOIqfy1PZQYspqhajr0BlEX6IQ0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export type JoinRequestResponse = {
  id?: string;
  status?: string;
  error?: string;
};

export type ProcessRequestResponse = {
  message?: string;
  error?: string;
};

type Tables = Database['public']['Tables'];
type TableNames = keyof Tables;
type Functions = Database['public']['Functions'];
type FunctionNames = keyof Functions;

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true
    },
    global: {
      headers: {
        'Content-Type': 'application/json'
      }
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
);

// Debug function to test permissions
export const testPermissions = async () => {
  const { data: sessionData } = await supabase.auth.getSession();
  console.log("Current session:", sessionData);
  
  try {
    const { data, error } = await supabase.from('profiles' as TableNames).select('*').limit(1);
    console.log("Test query result:", { data, error });
    return { success: !error, error, data };
  } catch (err) {
    console.error("Test query error:", err);
    return { success: false, error: err };
  }
};

// Debug function to check database schema
export const inspectTableSchema = async (tableName: TableNames) => {
  try {
    // First check if we can access the table at all
    const { data: tableData, error: tableError } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);
      
    if (tableError) {
      console.error(`Error accessing table ${tableName}:`, tableError);
      return { success: false, error: tableError, schema: null };
    }
    
    // Get the table definition from the PostgreSQL information schema
    // Since this isn't in our defined functions, we'll need to handle it differently
    const { data: schemaData, error: schemaError } = await supabase
      .from('pg_tables')
      .select('*')
      .eq('tablename', tableName);
    
    if (schemaError) {
      console.error(`Error getting schema for ${tableName}:`, schemaError);
      
      // Alternative approach: infer schema from a record if available
      if (tableData && tableData.length > 0) {
        const sampleRecord = tableData[0];
        const inferredSchema = Object.keys(sampleRecord).map(column => ({
          column_name: column,
          data_type: typeof sampleRecord[column]
        }));
        
        console.log(`Inferred schema for ${tableName}:`, inferredSchema);
        return { 
          success: true, 
          error: null, 
          schema: inferredSchema,
          note: 'Schema inferred from sample record' 
        };
      }
      
      return { success: false, error: schemaError, schema: null };
    }
    
    console.log(`Schema for ${tableName}:`, schemaData);
    return { success: true, error: null, schema: schemaData };
  } catch (err) {
    console.error(`Error inspecting schema for ${tableName}:`, err);
    return { success: false, error: err, schema: null };
  }
};

// Debug function to check RLS policies
export const checkRlsPermissions = async (tableName: TableNames) => {
  try {
    // First check auth status
    const { data: sessionData } = await supabase.auth.getSession();
    console.log("Current session:", sessionData);
    
    // Try basic select
    const { data: selectData, error: selectError } = await supabase
      .from(tableName)
      .select('*')
      .limit(5);
      
    console.log(`SELECT test for ${tableName}:`, selectError ? 'Failed' : 'Success', 
      selectError ? selectError : `Retrieved ${selectData?.length || 0} rows`);
    
    // Try select with auth ID filter  
    const userId = sessionData?.session?.user?.id;
    if (userId) {
      const { data: ownData, error: ownError } = await supabase
        .from(tableName)
        .select('*')
        .eq('id', userId)
        .maybeSingle();
        
      console.log(`SELECT own data test for ${tableName}:`, ownError ? 'Failed' : 'Success',
        ownError ? ownError : `Data ${ownData ? 'found' : 'not found'}`);
    }
    
    // For custom functions, we'll need a different approach
    // This is a placeholder - in a real app, you'd need to create this function in Supabase
    const testInsertResult = await fetch(`${SUPABASE_URL}/rest/v1/rpc/test_insert_permission`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
      },
      body: JSON.stringify({
        p_table: tableName,
        p_user_id: userId || 'temp_' + Date.now()
      })
    }).then(res => res.json()).catch(err => ({ error: err }));
    
    const insertError = testInsertResult.error;
    
    console.log(`INSERT test for ${tableName}:`, insertError ? 'Failed' : 'Success',
      insertError ? insertError : 'Insert permitted');
      
    return {
      auth: !!sessionData?.session,
      userId: sessionData?.session?.user?.id,
      canSelect: !selectError,
      canSelectOwn: userId ? true : null,
      canInsert: !insertError,
      error: selectError || insertError
    };
  } catch (err) {
    console.error(`RLS check error for ${tableName}:`, err);
    return { error: err, auth: false };
  }
};
